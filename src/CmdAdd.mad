import type { Either } from "Either"
import type { Wish } from "Wish"

import type { Flag } from "Ensign"

import type { RageAddDef } from "@/CmdAdd/Config"

import { Left, Right } from "Either"
import { always, ifElse } from "Function"
import IO from "IO"
import { Just, Nothing, fromMaybe } from "Maybe"
import { bad, good } from "Wish"

import E from "Ensign"

import { dependencyToJson, reifyDependency } from "@/CmdAdd/Actions/AddDep"
import { postParse } from "@/CmdAdd/Args"
import { FLAGS } from "@/CmdAdd/Args"
import { concrete } from "@/Dependency"
import { fileExists } from "@/External"
import { help } from "@/Help"
import MadJson from "@/MadlibJson"
import { toJson } from "@/MadlibJson/Render"



// NB: We only wanna support things when we're in the
// same folder as a madlib.json file

// processDef :: RageAddDef -> Wish String String
processDef = where {
  { archivePattern, domain, repo, tag } =>
    pipe(
      reifyDependency(archivePattern, domain, repo),
      IO.pTrace("REIFIED!"),
      // Maybe Dependency
      // map(dependencyToJson),
      // Maybe String
      // show,
      // fromMaybe(""),
      good,
    )(tag)
}

renderHelp :: RageAddDef -> Wish String String
renderHelp = pipe(
  .useColor,
  help($, "add", FLAGS),
  good,
)

ensureMadlibJsonInScope :: RageAddDef -> Wish String RageAddDef
export ensureMadlibJsonInScope = (def) => do {
  check <- fileExists("madlib.json")
  return check ? good(def) : bad("Unable to find madlib.json!")
}

_safeEnsureDependency = (mDep, eJson) => where(#[eJson, mDep]) {
  #[Right(json), Just(dep)] =>
    Right(MadJson.ensureDependency(json, dep))

  #[Right(json), _] =>
    Left("Unable to read dependency!")

  #[Left(x), _] =>
    Left(x)
}

readMadlibJsonAndProcessDependency = (mJsonPath, d) => pipe(
  MadJson.readFile,
  ap(
    good(
      (eJson, mDep) => where(#[eJson, mDep]) {
        #[Right(json), Just(dep)] =>
          Right(MadJson.ensureDependency(json, dep))

        #[Right(json), _] =>
          Left("Unable to read dependency!")

        #[Left(x), _] =>
          Left(x)
      },
    ),
  ),
  ap($, good(d)),
)(mJsonPath)

// _invoke :: RageAddDef -> Wish String String
_invoke = ifElse(
  .help,
  renderHelp,
  pipe(
    ensureMadlibJsonInScope,
    chain(processDef),
    map(IO.pTrace("PROCESSED!")),
    map(readMadlibJsonAndProcessDependency("madlib.json")),
    map(map(IO.pTrace(">>>"))),
    map(always("skippy dippy")),
  ),
)


// cmdAdd :: List Flag -> Either String (Wish String String)
export cmdAdd = pipe(
  postParse,
  map(_invoke),
)
