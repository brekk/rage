import type { Comparison } from "Compare"

import type { Version } from "@/Dependency/Version"

import { EQ, GT, LT } from "Compare"
import {} from "Integer"
import { find } from "List"
import { Just, Nothing } from "Maybe"
import { fromMaybe } from "Maybe"
import { split } from "String"

import { Version, showVersion } from "@/Dependency/Version"



export type Version
export Version

export alias StaticDependency = { description :: String, minVersion :: String, url :: String }

export alias DependencyMap = Dictionary String String

export type Dependency
  = Dependency(
    // description
    String,
    // minVersion
    Version,
    // url
    String,
  )

concrete :: StaticDependency -> Dependency
export concrete = (x) => Dependency(
  x.description,
  pipe(
    scan,
    fromMaybe(Version(0, 0, 0)),
  )(x.minVersion),
  x.url,
)

ghReleaseUrl :: String -> String -> String -> String
export ghReleaseUrl = (org, repo, s) => `https://github.com/${org}/${repo}/archive/refs/tags/v${
  s
}.zip`

includes :: String -> List Dependency -> Boolean
export includes = (n, ds) => pipe(
  find(where { Dependency(x, _, _) => x == n }),
  where {
    Just(_) =>
      true

    _ =>
      false
  },
)(ds)
