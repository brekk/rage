import type { DeclaredFlag } from "Ensign"

import { join } from "String"

import E from "Ensign"



help :: Boolean -> String -> List DeclaredFlag -> String
export help = (withColor, name, flags) => "## `rage "
    ++ name
    ++ "`\n\n"
    ++ (withColor ? E.printLegendWithColor : E.printLegend)(flags)

multiHelp :: Boolean -> String -> List #[String, List DeclaredFlag] -> String
export multiHelp = (withColor, summary, sections) => pipe(
  map(where { #[n, f] => help(withColor, n, f) }),
  join("\n"),
  mappend(summary),
)(sections)
