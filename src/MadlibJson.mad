import type { Either } from "Either"
import type { Error } from "File"
import type { Wish } from "Wish"

import type { Dependency } from "@/Dependency"
import type { MadJson, MadPackage } from "@/MadlibJson/Types"

import { Left, Right, fromRight, mapLeft } from "Either"
import File from "File"
import { always, ifElse, when } from "Function"
import List from "List"
import { fromMaybe } from "Maybe"
import { bad, good, mapRej } from "Wish"

import Deps from "@/Dependency"
import { madParse } from "@/MadlibJson/Parse"



export parse = madParse

concrete :: MadJson -> MadPackage
export concrete = where {
  { bin, dependencies, madlibVersion, main, name, version } =>
    (
      {
        bin,
        madlibVersion,
        main,
        name,
        version,
        dependencies: pipe(
          map(map(Deps.concrete)),
          fromMaybe([]),
        )(dependencies),
      }
    )
}

hasDependency :: MadPackage -> Dependency -> Boolean
export hasDependency = (json, dep) => pipe(
  .dependencies,
  Deps.includes(Deps.description(dep)),
)(json)

changeDependency :: MadPackage -> Dependency -> MadPackage
export changeDependency = (json, updatedDep) => pipe(
  .dependencies,
  map(when(Deps.equals(updatedDep), always(updatedDep))),
  (dx) => ({ ...json, dependencies: dx }),
)(json)

addDependency :: MadPackage -> Dependency -> MadPackage
addDependency = (json, dep) => pipe(
  .dependencies,
  List.append(dep),
  (dx) => ({ ...json, dependencies: dx }),
)(json)

ensureDependency :: MadPackage -> Dependency -> MadPackage
export ensureDependency = (json, dep) => ifElse(
  hasDependency(json),
  changeDependency(json),
  addDependency(json),
)(dep)

readFile :: String -> Wish String (Either String MadPackage)
export readFile = (filePath) => pipe(
  File.read,
  mapRej(always(`Unable to read ${filePath}`)),
  map(
    pipe(
      madParse,
      map(concrete),
    ),
  ),
)(filePath)
