import type { CommandResult } from "Process"
import type { Wish } from "Wish"

import { equals } from "Function"
import IO from "IO"
import { DEFAULT_COMMAND_OPTIONS, exec } from "Process"
import { join } from "String"
import { bad, chainRej, good } from "Wish"

import { log } from "@/Log"



export alias CommandWish = Wish CommandResult CommandResult

run :: String -> List String -> CommandWish
export run = (cmd, args) => {
  summary = `${IO.green(cmd)} ${IO.yellow(join(" ", args))}`
  return pipe(
    log.external(summary),
    exec($, args, DEFAULT_COMMAND_OPTIONS),
  )(cmd)
}

export which = run("which")


_existenz = (fn) => pipe(
  of,
  fn,
  map(
    pipe(
      .exitCode,
      equals(0),
    ),
  ),
  chainRej(
    pipe(
      .exitCode,
      equals(0),
      good,
    ),
  ),
)


export exists = _existenz(which)
export fileExists = _existenz(run("ls"))


// it's like run, but like, slower and safer
walk :: String -> List String -> CommandWish
export walk = (cmd, args) => pipe(
  exists,
  chain(
    (valid) => {
      return if (valid) {
        run(cmd, args)
      } else do {
        failstring = "Command '" ++ cmd ++ "' does not exist"
        return bad({
          // 18 1 7 5
          // r  a g e
          exitCode: 18175,
          stderr: failstring,
          stdout: failstring,
        })
      }
    },
  ),
)(cmd)




export gh = run("gh")
export curl = run("curl")
export git = run("git")
export rm = run("rm")
export rimraf = pipe(
  of,
  mappend(["-rf"]),
  rm,
)
export mkdir = run("mkdir")
