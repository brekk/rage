import type { RageDef, RageState } from "@/CmdCreate/Config"
import type { CommandWish } from "@/External"

import { apL } from "Applicative"
import { good } from "Wish"

import { RepoSkipped, statusIgnore, statusInit, statusRepo } from "@/CmdCreate/Status"
import Ext from "@/External"
import Git from "@/Git"
import Gh from "@/Github"



_pullGitignore :: RageDef -> CommandWish
export _pullGitignore = where {
  { name, ignore } =>
    Ext.curl([ignore, "-o", `${name}/.gitignore`])
}

pullGitignore :: RageDef -> RageState
export pullGitignore = pipe(
  _pullGitignore,
  statusIgnore,
)


gitInit :: String -> RageState
gitInit = pipe(
  Git.init,
  statusInit,
)

_githubRepo :: RageDef -> CommandWish
export _githubRepo = where {
  { description, visibility } =>
    Gh.newRepoWithConfig(visibility, description)
}

githubRepo :: RageDef -> RageState
export githubRepo = (def) => where(def) {
  { createRepo } =>
    if (createRepo) {
      pipe(
        _githubRepo,
        statusRepo,
      )(def)
    } else {
      good(RepoSkipped)
    }
}


runGitCommands :: RageDef -> RageState -> RageState
export runGitCommands = (def, s) => pipe(
  where {
    { createRepo, name } =>
      do {
        i <- gitInit(name)
        g <- pullGitignore(def)
        x <- githubRepo(def)
        return of(x)
      }
  },
  apL($, s),
)(def)
