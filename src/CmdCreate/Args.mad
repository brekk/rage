pmport type { RageDef } from "@/CmdCreate/Config"
import type { Visibility } from "@/Github"

import { mapLeft } from "Either"
import List from "List"
import { Just, Nothing } from "Maybe"
import { toLower } from "String"

import { Flag, FlagToggle, flagBoolean, flagString, printIssues, validate } from "Ensign"

import { Library, Other, Tool } from "@/CmdCreate/Config"
import { Internal, Private, Public } from "@/Github"



export FLAGS = [
  flagString("name", ["n"], "The name of the project"),
  flagString("description", ["d", "desc"], "Describe the project"),
  flagString("ignore", ["i"], "A path to a .gitignore source"),
  flagBoolean("aliases", ["a"], "Use `importAliases` in madlib.json?"),
  flagBoolean("git", ["g"], "Run git init and pull .gitignore?"),
  flagString("kind", ["k"], "What kind of project is this? (tool / library / other"),
  flagBoolean("createRepo", ["r"], "Should we create a new repo? (Requires `gh` configuration)"),
  flagBoolean("dryRun", ["safe", "s"], "Should we print commands rather than running them?"),
  flagBoolean(
    "visibility",
    ["p"],
    "Set the access level of the repo (Only applied when `createRepo` is true)",
  ),
  flagString("configFile", ["f"], "Load a rage config file"),
]

DEFAULT_RAGE_DEF :: RageDef
DEFAULT_RAGE_DEF = {
  createRepo: false,
  description: "",
  dryRun: false,
  ignore: "https://raw.githubusercontent.com/madlib-lang/.gitignore/main/mad-ignore",
  kind: Library,
  name: "",
  useAliases: true,
  useGit: true,
  visibility: Public,
  configFile: Nothing,
}

firstPass = (agg, flag) => where(flag) {
  Flag(k, v) =>
    if (k == "description") {
      { ...agg, description: v }
    } else if (k == "ignore") {
      { ...agg, ignore: v }
    } else if (k == "name") {
      { ...agg, name: v }
    } else if (k == "kind") do {
      v2 = toLower(v)
      kind = v2 == "library" ? Library : v2 == "tool" ? Tool : Other
      return { ...agg, kind }
    } else if (k == "visibility") do {
      v2 = toLower(k)
      visibility = v2 == "public" ? Public : v2 == "private" ? Private : Internal
      return { ...agg, visibility }
    } else if (k == "configFile") {
      { ...agg, configFile: Just(v) }
    } else {
      agg
    }

  FlagToggle(k, v) =>
    if (k == "aliases") {
      { ...agg, useAliases: v }
    } else if (k == "git") {
      { ...agg, useGit: v }
    } else if (k == "createRepo") {
      { ...agg, createRepo: v }
    } else if (k == "dryRun") {
      { ...agg, dryRun: v }
    } else {
      agg
    }
}

secondPass = (inputs) => pipe(
  .configFile,
  where {
    Nothing =>
      inputs

    Just(raw) =>
      where(inputs) {
        { createRepo, description, dryRun, ignore, kind, name, useAliases, useGit, visibility } =>
          (
            {
              ...raw,
              createRepo,
              description,
              dryRun,
              ignore,
              kind,
              name,
              useAliases,
              useGit,
              visibility,
            }
          )
      }
  },
)(inputs)

export postParse = pipe(
  validate(FLAGS),
  mapLeft(printIssues),
  map(List.reduce(firstPass, DEFAULT_RAGE_DEF)),
  map(secondPass),
)
