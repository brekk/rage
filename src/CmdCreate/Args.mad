import type { Either } from "Either"
import type { Error } from "File"
import type { Wish } from "Wish"

import type { DeclaredFlag, Flag } from "Ensign"

import type { RageDef } from "@/CmdCreate/Config"
import type { RageConfig } from "@/ConfigFile"
import type { Visibility } from "@/Github"

import { Right, mapLeft } from "Either"
import List from "List"
import { Just, Nothing } from "Maybe"
import { toLower } from "String"

import { Flag, FlagToggle, flagBoolean, flagString, printIssues, validate } from "Ensign"

import { Library, Other, Tool } from "@/CmdCreate/Config"
import { readConfigFile } from "@/ConfigFile"
import { Internal, Private, Public } from "@/Github"



export FLAGS = [
  flagBoolean("color", ["C"], "Use color when printing"),
  flagBoolean("help", ["h"], "Print the help text for `create`"),
  flagString("name", ["n"], "The name of the project"),
  flagString("description", ["d", "desc"], "Describe the project"),
  flagString("ignore", ["i"], "A path to a .gitignore source"),
  flagBoolean("aliases", ["a"], "Use `importAliases` in madlib.json?"),
  flagBoolean("git", ["g"], "Run git init and pull .gitignore?"),
  flagString("kind", ["k"], "What kind of project is this? (tool / library / other"),
  flagBoolean("createRepo", ["r"], "Should we create a new repo? (Requires `gh` configuration)"),
  flagBoolean("dryRun", ["safe", "s"], "Should we print commands rather than running them?"),
  flagBoolean(
    "visibility",
    ["p"],
    "Set the access level of the repo (Only applied when `createRepo` is true)",
  ),
  flagString("configFile", ["config", "f"], "Load a rage config file"),
]

// TODO: we might we want replace some configuration with a Maybe, so we can encapsulate the idea of something being unset at first
DEFAULT_RAGE_DEF :: RageDef
export DEFAULT_RAGE_DEF = {
  createRepo: false,
  description: "",
  dryRun: false,
  ignore: "https://raw.githubusercontent.com/madlib-lang/.gitignore/main/mad-ignore",
  kind: Library,
  name: "",
  useColor: true,
  useAliases: true,
  useGit: true,
  visibility: Public,
  configFile: Nothing,
  help: false,
}


reifyParsedFlags :: RageDef -> Flag -> RageDef
export reifyParsedFlags = (agg, flag) => where(flag) {
  Flag(k, v) =>
    if (k == "description") {
      { ...agg, description: v }
    } else if (k == "ignore") {
      { ...agg, ignore: v }
    } else if (k == "name") {
      { ...agg, name: v }
    } else if (k == "kind") do {
      v2 = toLower(v)
      kind = v2 == "library" ? Library : v2 == "tool" ? Tool : Other
      return { ...agg, kind }
    } else if (k == "visibility") do {
      v2 = toLower(k)
      visibility = v2 == "public" ? Public : v2 == "private" ? Private : Internal
      return { ...agg, visibility }
    } else if (k == "configFile") {
      { ...agg, configFile: Just(v) }
    } else {
      agg
    }

  FlagToggle(k, v) =>
    if (k == "help") {
      { ...agg, help: v }
    } else if (k == "aliases") {
      { ...agg, useAliases: v }
    } else if (k == "git") {
      { ...agg, useGit: v }
    } else if (k == "createRepo") {
      { ...agg, createRepo: v }
    } else if (k == "dryRun") {
      { ...agg, dryRun: v }
    } else {
      agg
    }
}

mergeConfigFile :: RageDef -> RageConfig -> RageDef
export mergeConfigFile = (parsedDef, raw) => where(raw) {
  { ignore, useAliases, useGit } =>
    (
      {
        ...parsedDef,
        ignore: if (parsedDef.ignore != ignore) {
          parsedDef.ignore
        } else {
          ignore
        },
        useAliases: if (parsedDef.useAliases != useAliases) {
          parsedDef.useAliases
        } else {
          useAliases
        },
        useGit: if (parsedDef.useGit != useGit) {
          parsedDef.useGit
        } else {
          useGit
        },
      }
    )
}

readConfigFileAndMerge :: RageDef -> String -> Wish Error RageDef
readConfigFileAndMerge = (parsedDef, x) => pipe(
  readConfigFile,
  map(
    where {
      Right(raw) =>
        mergeConfigFile(parsedDef, raw)

      _ =>
        parsedDef
    },
  ),
)(x)

applyConfigFile :: RageDef -> RageDef
export applyConfigFile = (parsedDef) => pipe(
  .configFile,
  where {
    Nothing =>
      parsedDef

    Just(filePath) =>
      readConfigFileAndMerge(parsedDef, filePath)
  },
)(parsedDef)

postParse :: List Flag -> Either String RageDef
export postParse = pipe(
  validate(FLAGS),
  mapLeft(printIssues),
  map(
    pipe(
      List.reduce(reifyParsedFlags, DEFAULT_RAGE_DEF),
      applyConfigFile,
    ),
  ),
)
