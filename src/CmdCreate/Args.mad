import type { RageDef } from "@/CmdCreate/Config"

import { mapLeft } from "Either"
import List from "List"
import { toLower } from "String"

import { Flag, FlagToggle, flagBoolean, flagString, printIssues, validate } from "Ensign"

import { Library, Other, Tool } from "@/CmdCreate/Config"



export FLAGS = [
  flagString("name", ["n"], "The name of the project"),
  flagString("description", ["d", "desc"], "Describe the project"),
  flagString("ignore", ["i"], "A path to a .gitignore source"),
  flagBoolean("aliases", ["a"], "Use `importAliases` in madlib.json?"),
  flagBoolean("git", ["g"], "Run git init and pull .gitignore?"),
  flagString("kind", ["k"], "What kind of project is this? (tool / library / other"),
  flagBoolean("createRepo", ["r"], "Should we create a new repo? (Requires `gh` configuration)"),
  flagBoolean("dryRun", ["safe", "s"], "Should we print commands rather than running them?"),
]

DEFAULT_RAGE_DEF :: RageDef
DEFAULT_RAGE_DEF = {
  createRepo: false,
  description: "",
  dryRun: false,
  ignore: "https://raw.githubusercontent.com/madlib-lang/.gitignore/main/mad-ignore",
  kind: Library,
  name: "",
  useAliases: true,
  useGit: true,
}


export postParse = pipe(
  validate(FLAGS),
  mapLeft(printIssues),
  map(
    List.reduce(
      (agg, flag) => where(flag) {
        Flag(k, v) =>
          if (k == "description") {
            { ...agg, description: v }
          } else if (k == "ignore") {
            { ...agg, ignore: v }
          } else if (k == "name") {
            { ...agg, name: v }
          } else if (k == "kind") do {
            v2 = toLower(v)
            kind = v2 == "library" ? Library : v2 == "tool" ? Tool : Other
            return { ...agg, kind }
          } else {
            agg
          }

        FlagToggle(k, v) =>
          if (k == "aliases") {
            { ...agg, useAliases: v }
          } else if (k == "git") {
            { ...agg, useGit: v }
          } else if (k == "createRepo") {
            { ...agg, createRepo: v }
          } else if (k == "dryRun") {
            { ...agg, dryRun: v }
          } else {
            agg
          }
      },
      DEFAULT_RAGE_DEF,
    ),
  ),
)
