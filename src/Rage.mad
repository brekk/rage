import { Right } from "Either"
import { complement, noop } from "Function"
import IO from "IO"
import List from "List"
import String from "String"
import Wish from "Wish"

import Ensign from "Ensign"
import E from "Ensign"

import { cmdAdd } from "@/CmdAdd"
import CmdAddArgs from "@/CmdAdd/Args"
import { cmdCreate } from "@/CmdCreate"
import CmdCreateArgs from "@/CmdCreate/Args"
import { hasNoColor, multiHelp } from "@/Help"



deadEnd = Wish.fulfill(
  pipe(
    IO.pTrace("BAD!"),
    noop,
  ),
  pipe(
    IO.put,
  ),
)

printHelp = (useColor) => pipe(
  // we print help with color because we haven't been told not to
  multiHelp(useColor, "# `rage`\n\nA tool for bootstrapping madlib projects"),
  Wish.good,
  Right,
)([#["create", CmdCreateArgs.FLAGS], #["add", CmdAddArgs.FLAGS]])

main = (args) => {
  pipe(
    List.drop(1),
    where {
      [cmd, ...rawArgs] =>
        do {
          parsed = Ensign.parseFlags(rawArgs)
          return if (cmd == "create") {
            cmdCreate(parsed)
          } else if (cmd == "add" || cmd == "install") {
            cmdAdd(parsed)
          } else {
            pipe(
              complement(hasNoColor),
              printHelp,
            )(parsed)
          }
        }

      _ =>
        printHelp(true)
    },
    map(deadEnd),
  )(args)
}
