import { Right } from "Either"
import { noop } from "Function"
import IO from "IO"
import List from "List"
import String from "String"
import Wish from "Wish"

import E from "Ensign"

import { cmdCreate } from "@/CmdCreate"
import CmdCreateArgs from "@/CmdCreate/Args"



deadEnd = Wish.fulfill(
  pipe(
    IO.pTrace("BAD!"),
    noop,
  ),
  pipe(
    IO.put,
  ),
)

printHelp = () => pipe(
  map(where { #[n, args] => "## `rage " ++ n ++ "`\n\n" ++ E.printLegend(args) }),
  String.join("\n"),
  mappend("# `rage`\n\nA tool for bootstrapping madlib projects\n\n"),
  Wish.good,
  Right,
)([#["create", CmdCreateArgs.FLAGS]])

main = (args) => {
  pipe(
    List.drop(1),
    where {
      [cmd, ...rawArgs] =>
        if (cmd == "create") {
          cmdCreate(rawArgs)
        } else {
          printHelp()
        }

      _ =>
        printHelp()
    },
    map(deadEnd),
  )(args)
  // deadEnd 
}
