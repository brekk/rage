import type { Parser } from "Parse"

import { gt } from "Compare"
import { identity, ifElse, when } from "Function"
import { anyChar, char, choice, eof, someTill, string } from "Parse"
import String from "String"
import { fromList, trim } from "String"



export type Flag
  = Name(String)
  | Description(String)
  | Ignore(String)
  | Repo(String)
  | UseAliases(Boolean)

// flagName :: Parser Flag
// export flagName = do {
//   _ <- string("--name")
//   _ <- char(' ')
//   name <- pipe(
//     someTill(anyChar),
//     map(
//       pipe(
//         fromList,
//         trim,
//       ),
//     ),
//   )(choice([char('-'), char(' ')]))
//   return of(Name(name))
// }
/*
convertShortFlag = where {
  [f, x, ...rest] =>
    [
      (
        x == "n" ? Name : x == "d" ? Description : x == "i" ? Ignore : x == "r" ? Repo,
      ...convertShortFlag(rest),
    ]
  [f, x] => 
  [] =>
    []
}
*/

LONG_FLAG = "--"
SHORT_FLAG = "-"

// processShortFlag :: String -> List Flag
export processShortFlag = pipe(
  String.drop(1),
  ifElse(
    pipe(
      String.length,
      gt($, 1),
    ),
    String.split(""),
    of,
  ),
  map(String.prependChar('-')),
)

export processLongFlag = pipe(
  String.drop(2),
  ifElse(
    String.startsWith("no-"),
    pipe(
      String.drop(3),
      mappend("!"),
    ),
    mappend("$"),
  ),
  of,
)

export handleRawValue = of

// processArg :: String -> List Flag
export processArg = ifElse(
  String.startsWith(LONG_FLAG),
  processLongFlag,
  ifElse(String.startsWith(SHORT_FLAG), processShortFlag, handleRawValue),
)
