import type { DeclaredFlag, Flag } from "Ensign"

import type { Project } from "@/Library"
import type { RageDef } from "@/Library"

import Dict from "Dictionary"
import { Left, Right } from "Either"
import { fromRight, mapLeft } from "Either"
import List from "List"
import { Just, Nothing } from "Maybe"
import { join, toLower } from "String"

import Ensign from "Ensign"

import { Library, Other, Tool } from "@/Library"



export FLAGS = [
  Ensign.flagString("name", ["n"], "The name of the project"),
  Ensign.flagString("description", ["d", "desc"], "Describe the project"),
  Ensign.flagString("ignore", ["i"], "A path to a .gitignore source"),
  Ensign.flagBoolean("aliases", ["a"], "Use `importAliases` in madlib.json?"),
  Ensign.flagBoolean("git", ["g"], "Run git init and pull .gitignore?"),
  Ensign.flagString("setRemote", ["r"], "Should we create a repo and set it as remote?"),
  Ensign.flagString("remote", ["R"], "What should we call this remote? (default: origin)"),
  Ensign.flagString("kind", ["k"], "What kind of project is this? (tool / library / other"),
]

DEFAULT_RAGE_DEF :: RageDef
DEFAULT_RAGE_DEF = {
  description: "",
  ignore: "https://raw.githubusercontent.com/madlib-lang/.gitignore/main/mad-ignore",
  name: "",
  template: "",
  kind: Library,
  useAliases: true,
  useGit: true,
  setRemote: false,
  remote: "origin",
}


export postParse = pipe(
  Ensign.validate(FLAGS),
  mapLeft(Ensign.printIssues),
  map(
    List.reduce(
      (agg, flag) => where(flag) {
        Ensign.Flag(k, v) =>
          if (k == "description") {
            { ...agg, description: v }
          } else if (k == "ignore") {
            { ...agg, ignore: v }
          } else if (k == "name") {
            { ...agg, name: v }
          } else if (k == "template") {
            { ...agg, template: v }
          } else if (k == "kind") do {
            v2 = toLower(v)
            kind = v2 == "library" ? Library : v2 == "tool" ? Tool : Other
            return { ...agg, kind }
          } else if (k == "remote") {
            { ...agg, remote: v }
          } else {
            agg
          }

        Ensign.FlagToggle(k, v) =>
          if (k == "aliases") {
            { ...agg, useAliases: v }
          } else if (k == "git") {
            { ...agg, useGit: v }
          } else if (k == "setRemote") {
            { ...agg, setRemote: v }
          } else {
            agg
          }
      },
      DEFAULT_RAGE_DEF,
    ),
  ),
)
